package simplechat.server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import ocsf.server.AbstractServer;import ocsf.server.ConnectionToClient;import simplechat.common.ChatIF;import simplechat.common.ConsoleUI;/** * This class overrides some of the methods in the abstract * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Laganière * @author François Bélanger * @author Paul Holden * @author Florent Hugouvieux * @version October 2020 */public class EchoServer extends AbstractServer{    /**     * The default port to listen on.     */    public static final int DEFAULT_PORT = 5555;    private ChatIF serverUI;    /**     * Constructs an instance of the echo server.     *     * @param port The port number to connect on.     */    public EchoServer(int port, ChatIF serverUI)    {        super(port);        this.serverUI = serverUI;    }    public void handleMessageFromUI(String message)    {        String toSend = "Server MSG> " + message;        System.out.println(toSend);        sendToAllClients(toSend);    }    /**     * This method is responsible for the creation of     * the server instance (there is no UI in this phase).     *     * @param args [port] The port number to listen on.  Defaults to 5555     *             if no argument is entered.     */    public static void main(String[] args)    {        int port = 0; //Port to listen on        try        {            port = Integer.parseInt(args[0]); //Get port from command line        }        catch (Throwable t)        {            port = DEFAULT_PORT; //Set port to 5555        }        ConsoleUI ui = new ConsoleUI();        EchoServer sv = new EchoServer(port, ui);        ui.setInputHandler(sv::handleMessageFromUI);        try        {            new Thread(ui::startQueryingInput).start();            sv.listen(); //Start listening for connections        }        catch (Exception ex)        {            System.out.println("ERROR - Could not listen for clients!");        }    }    /**     * This method handles any messages received from the simplechat.client.     *     * @param msg    The message received from the simplechat.client.     * @param client The connection from which the message originated.     */    @Override    public void handleMessageFromClient(Object msg, ConnectionToClient client)    {        serverUI.display("Message received: " + msg + " from " + client);        this.sendToAllClients(msg);    }    @Override    protected void serverStarted()    {        serverUI.display("Server listening for connections on port " + getPort());    }    @Override    protected void serverStopped()    {        serverUI.display("Server has stopped listening for connections.");    }    @Override    protected synchronized void clientDisconnected(ConnectionToClient client)    {        serverUI.display(client.getName() + " disconnected.");    }    @Override    protected void clientConnected(ConnectionToClient client)    {        serverUI.display(client.getName() + " connected.");;    }    @Override    protected synchronized void clientException(ConnectionToClient client, Throwable exception)    {        this.clientDisconnected(client);    }}